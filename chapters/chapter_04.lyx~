#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extreport
\options openright,cleardoublepage=empty
\use_default_options false
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding utf8
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks false
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle false
\pdf_quoted_options "colorlinks,citecolor=black,filecolor=black,linkcolor=black,urlcolor=black"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Implementazione
\end_layout

\begin_layout Standard
A seguito della fase di progettazione si è scelto di suddivedere lo sviluppo
 dell'applicazione in alcune fasi principali che seguono logicamente i workflow
 presentati nel dettaglio all'interno del capitolo 2.
 Questo ha permesso di dedicare maggiore attenzione ad ogni componente fino
 ad un livello di dettaglio molto alto, in modo da poter anche ottenere
 una buona valutazione sulle prestazioni dei nodi più critici dell'applicativo.
\end_layout

\begin_layout Standard
Per poter ottenere uno sviluppo abbastanza lineare è stato necessario considerar
e che alcune specifiche richieste erano presenti in tutto il sistema e che
 quindi non potevano essere sviluppate a se stante dagli altri componenti.
 Prima di tutto il design richiesto doveva essere presente in ogni singola
 view e per questo si è deciso di implementare fin da subito le interfaccie
 utenti per non dover replicare ad ogni passaggio le stesse operazioni di
 personalizzazione della UI.
\end_layout

\begin_layout Standard
Strutturato il metodo di sviluppo per la grafica dell'applicazione si è
 passati a gestire la navigazione principale scegliendo di utilizzare alcuni
 dei principali pattern Android: il 
\shape italic
NavigationDrawer
\shape default
 e le 
\shape italic
RecyclerView
\shape default
.
 Il menù iniziale è servito a separare anche concettualmente le principali
 funzioni da dover sviluppare così da poter procedere successivamente con
 l'impletazione di ogni componente potendovi accedere anche se altre parti
 dell'applicazione non erano ancora disponibili.
\end_layout

\begin_layout Standard
Ragionando ulteriormente dal generale al dettaglio si è scelto di sviluppare
 la mappa di ricerca degli shop poichè presente in entrambi i flussi logici
 principali e quindi nodo cardine dell'applicazione, specialmente in termini
 di prestazioni.
 La fase successiva ha fornito l'intera gestione della registrazione e dell'aute
nticazione di un utente poichè facente parte sia del sistema di marketing
 sia di quello di e-commerce, ultimi componenti implementati durante la
 fase di sviluppo.
\end_layout

\begin_layout Standard
A conclusione dell'implementazione si sono effettuati dei test per valutare
 le prestazioni dell'applicazione, in particolar modo sui nodi centrali
 che avrebbero potuto inficiare l'esperienza utente se con basse prestazioni,
 come ad esempio la mappa di ricerca.
\end_layout

\begin_layout Section
Design
\end_layout

\begin_layout Standard
Il Design è stato il primo concetto sviluppato poichè avrebbe rappresentato
 una costante durante l'implementazione di qualsiasi schermata dell'applicazione.
 In figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Temi"

\end_inset

 sono visualizzati rispettivamente la scelta di due temi differenti, uno
 chiaro ed uno scuro e a fianco è mostarto come cambia l'interfaccia di
 navigazione in base al tema selezionato.
 Tutti i componenti sono personalizzati implementando i tre font differenti,
 utilizzando le risorse messe a disposizione sia per le icone che per le
 azioni di navigazione.
\end_layout

\begin_layout Standard
Per incapsulare tutte le funzioni rigurdanti i temi all'interno di un unico
 oggetto si è creata la classe 
\emph on
Flavors 
\emph default
che rappresenta il tema attuale, recuperandolo dalle preferenze dell'applicazion
e, e contiene tutti i dati utili a personalizzare i componenti dell'interfaccia
 come ad esempio il 
\emph on
main
\emph default
 e il 
\emph on
secondary color
\emph default
.
 Questo oggetto viene automaticamente generato unicamente a partire da un
 contesto di una scherata senza dover eseguire nessa operazione di inizializzazi
one.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Flavors {
\end_layout

\begin_layout Plain Layout

    Context mContext;
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    public int getPrimaryColor();
\end_layout

\begin_layout Plain Layout

    public int getStatusBarColor();
\end_layout

\begin_layout Plain Layout

    public int getPrimaryTextColor();
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ad ogni inizializzazione e a ogni cambio di tema vi sono elementi dell'UI
 che sono da aggiornare, in special modo tutte le ImageView e le TextView
 che rappresentano rispettivamente ogni immagine e ogni testo presenti sulla
 schermata.
 Per automatizzare la gestione di questi componenti si è scelto di implementare
 un'interfaccia comune ai due oggetti chiamata 
\emph on
FlavorObject
\emph default
 che dichiarava un nuovo metodo chiamato 
\emph on
updateFlavor()
\emph default
 da richiamare ad ogni aggiornamento e che modifica gli elementi necessari.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public interface FlavorObject {
\end_layout

\begin_layout Plain Layout

    public void updateFlavor(Flavors flavor);
\end_layout

\begin_layout Plain Layout

    public void updateFlavor(Context context, String taste);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Da quest'interfaccia si sono ereditate le tre view principali che sono state
 utilizzate durante tutto lo sviluppo di questa tesi e che hanno permesso
 di richiamare in metodo ricorsivo su tutti i componenti lo stesso metodo,
 in modo da aggiornare la schermata senza dover conoscere esattamente come
 ogni singolo elemento andava modificato.
 Ogni custom view ha quindi implementato il metodo dell'interfaccia così
 da gestire in maniera automatica i temi chiari/scuri e il cambio ad ogni
 aggiornamento.
\end_layout

\begin_layout Standard
Per la gestione dei font dei testi si è sfruttato il fatto di aver implementato
 una versione personalizzata della textView così da implementare un nuovo
 elemento all'interno del componente scritto in xml.
 In questo modo si è potuto rendere il codice molto più pulito indicando
 il font per ogni testo direttamente nella definizione della view senza
 dover gestire ogni elemento tramite java alla creazione della schermata.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<com.carpigiani.mygelato.custom.CustomTextView             
\end_layout

\begin_layout Plain Layout

	android:layout_width="wrap_content"
\end_layout

\begin_layout Plain Layout

	android:layout_height="wrap_content"
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	app:typefaceAsset="fonts/Pacifico.ttf"/>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per eseguire l'aggiornamento automatico di tutte le view si è scelto di
 creare una custom Activity, che rappresenta il componente di una schermata
 dell'interfaccia utente, così da implementare anche in questo caso un metodo
 che venisse richiamato ogni volta che vi erano elementi da modificare.
\end_layout

\begin_layout Standard
Questa 
\emph on
FlavorActivity
\emph default
 incapsula la gestione stessa del tema attuale, grazie ad una variabile
 Flavors, aggiornando in maniera automatica oltre agli elementi dichiarati
 anche la toolbar e la statusbar visibili come componenti di sistema di
 Android.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class FlavorActivity extends AppCompatActivity {
\end_layout

\begin_layout Plain Layout

    private Flavors flavors;
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    @Override     
\end_layout

\begin_layout Plain Layout

	public void onResume() {
\end_layout

\begin_layout Plain Layout

        super.onResume();
\end_layout

\begin_layout Plain Layout

        applyFlavor();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    public void applyFlavor() {
\end_layout

\begin_layout Plain Layout

        this.flavors = new Flavors(this);
\end_layout

\begin_layout Plain Layout

        updateBar();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Concluso lo sviluppo di ogni componente si è inserita all'interno della
 navigazione principale la possibilità di accedere alla sezione per la scelta
 del tema da parte dell'utente che elenca ogni tema identificandolo con
 un nome di gelato e alcune immagini personalizzate come si può notare in
 figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Temi"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement bh
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/tommaso/Documents/Tesi/thesis/images/temi.jpg
	lyxscale 20
	scale 6

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Temi"

\end_inset

Temi
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Ricerca
\end_layout

\begin_layout Section
Utente
\end_layout

\begin_layout Standard
Il primo passaggio effettuato durante lo sviluppo della sezione legata all'utent
e è stato quello di realizzare un modello, definito all'interno della classe
 
\emph on
User
\emph default
, che racchiude tutte le informazioni legate ad un account.
 Utilizzando Realm è stato possibile definire un oggetto che lo rappresenta,
 mantiene in locale sul dispositivo tutti i dati inseriti e mette a disposizione
 un insieme di funzioni utili per la gestione del database.
\end_layout

\begin_layout Standard
La sezione er la gestione del proprio account e delle funzioni di autenticazione
 sono inserite in una parte del menù laterale della pagina principale dell'appli
cazione, permette di verificare se si è effettuato o meno l'accesso rapidamente
 potendo eseguire anche le azioni di login e logout.
 Si è inserito un header all'interno del menù laterale in cui sono visibili
 un'immagine circolare, un messaggio di benvenuto e un bottone per eseguire
 l'accesso.
 Una volta che l'utente sarà autenticato saranno invece visibili l'avatar,
 il nome, un'icona per accedere alla schermata di modifica dell'account
 e il bottone per eseguire il logout.
\end_layout

\begin_layout Standard
Si è poi implementata un'unica schermata dalla quale si può accedere al
 login tramite credenziali, al login tramite social network, alla registrazione
 di un nuovo account e si verrà reindirizzati a questa sezione ogni volta
 che l'utente tenterà di eseguire delle azioni in cui è necessario aver
 eseguito l'accesso senza essere autenticato.
\end_layout

\begin_layout Standard
Ogni azione che si vuole compiere, come per esempio l'accesso tramite credenzial
i, deve essere gestito all'interno dell'applicazione in modo molto accurato.
 Ogni campo di input è stato gestito in modo da attuare una validazione
 anche lato client informando in maniera diretta l'utente nel caso in cui
 i dati inseriti non siano corretti.
 A seguito dell'invio di ogni form viene eseguita una chiamata alle API
 del backend tramite l'interfaccia di supporto 
\emph on
Network
\emph default
 implementata in modo che ritorni eventuali messaggi di errore in maniera
 standardizzata.
\end_layout

\begin_layout Standard
Nel momento in cui l'utente esegue il login vengono aggiornate sul device
 le informazioni legate all'account, creando un oggetto Realm partendo dal
 modello, incapsulando ogni informazione scaricata dal server in modo che
 ogni sezione dell'applicativo possa accedervi localmente.
 L'accesso permette inoltre di accedere ad alcune sezioni dell'applicazione
 che altrimenti non si potrebbero visualizzare poichè ogni chiamata alle
 API deve essere corredata delle informazioni legate all'utente che esegue
 una determinata azione.
\end_layout

\begin_layout Standard
Infine anche le funzioni di logout sono gestite all'interno di un helper
 che incapsula tutte le operazioni necessarie per far si che nessun dato
 sensibile rimanga salvato in locale a seguite della disconessione dell'account
 e non vi siano casi di incosistenza tra le informazioni presenti in locale
 e sul server.
\end_layout

\begin_layout Section
Marketing Digitale
\end_layout

\begin_layout Subsection
Carte Promozionali
\end_layout

\begin_layout Subsection
Preferiti
\end_layout

\begin_layout Standard
Geofencing e notifiche push
\end_layout

\begin_layout Section
E-Commerce
\end_layout

\begin_layout Subsection
Coupon
\end_layout

\begin_layout Subsection
Acquisto
\end_layout

\begin_layout Subsection
Condivisione e Riscatto
\end_layout

\begin_layout Subsection
Utilizzo e Validazione
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
